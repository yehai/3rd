/** \mainpage

*This ain't Sparta!*

KoboldTouch treats you nicely. Automatic reference counting. 100% Objective-C public interface. Following Cocoa design guidelines. 
No cross-platform compromises. All iOS & Mac OS features ripe for integration.

Following is a bunch of info, losely connected. It's part design document, part vision statement, part guidelines, part information for users.


Visit http://www.koboldtouch.com for more info on KoboldTouch.


Targets, Requirements
=====================

- Development: Xcode 4.5 required (automatic property synthesizing, ObjC literals, subscripting, armv7s)
- Development: ARC mandatory (already enabled)
- Deployment Targets: iOS 5.0 and Mac OS X 10.7 or higher
- Device Support: iPhone 3GS, iPod touch (3rd generation), iPad 1 and all newer devices

Design Goals
============

- Tightly integrate MVC into the framework.
- Controllers talk to views and models and pull information from them. Model and Views know nothing about controller.
- Create a view controller for every cocos2d node class, minus the odd ones (motion streak, layer, node, parallax).
- Create Controller/Models for every relevant feature (Audio, Physics, Game Center, Archiving, etc).
- Controller/model methods should not require calling super implementation. Countless cocos2d users have forgotten to call [super cleanup] or [super onEnter].
- Avoid lengthy initializers. Create initialization objects to pass both required and optional parameters (with sensible defaults) to the receiving class.
- Lazy initialization. Controllers should not create their models until they're told to do so. Ideally an object graph for every scene is kept in memory (couple dozen KB).

Challenges
==========

Cocos2D is completely oblivious to MVC. 

- Actions break the MVC relationship since actions modify only the view, not the model. You could instruct the controller to inform the model about these changes.
However, there's a problem if the model uses the same property (ie position). You would then have the view update the model, and that's not desirable. 
Models will therefore get a system just like CCAction to be able to perform the same tasks as actions from within the model. In addition models get abilities,
which are like actions that run forever. Actions could then be disallowed by default (runAction = exception) but can be re-enabled with said implications.

Kobold2D: some users went back to vanilla cocos2d, apparently because of either its size/complexity or the folder structure. We need to better understand what makes
users not switch to Kobold2D, or even go back to regular cocos2d. The issue with these challenges is that it'll side-track us from our goal to make a better cocos2d.

- Kobold2D folders: one of the main complaints is the fixed folder structure. While it can all be manually changed, we can still improve the
tools to allow custom folders with a __Kobold2D__ folder in it.
- Size/Complexity: cleanup the Kobold2D-Libraries project, perhaps slimming it down to user requirements. For example, there could be two variants each including only one
 physics engine, or the Kobold2D-Libraries project could be autogenerated to include only the required libraries (decrease project load, index, search and compile time).

Testing, Building, Distribution, Source Control (distractions that do not directly contribute to the goal but are nevertheless important)
- KoboldTouch framework should get unit tests. But: more unit tests means slower refactoring. Requires well chosen tests.
- KoboldTouch needs to be included in the build server and figure out how to run the tests as well.
- Version number should be updated from build number (ie "v6.1.3 Build xxxx").
- Ideally a nightly script should upload the latest stable build + docs to the webserver. Figure out how.

Model-View-Controller
=====================

Remember: Cocos2D is only the view. The view follows the model, not vice versa.

\image html "Kobold Touch MVC Architecture.png"

\image html "Kobold Touch Architecture.png"

Design Guidelines
=================

**Embrace Objective-C! Don't fight it, use it!**

- Write *everything* in Objective-C first. You can still optimize later if you really really really have to **and** have proven that through profiling.
- Follow <a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html">Cocoa best practices and guidelines</a>.
- Let Xcode synthesize properties and ivars for you.
- Prefix ivars with an underscore (_myVar) just like Xcode does when it synthesizes a property
- Declare ivars private by default.

Structs and C arrays are notoriously difficult to archive, harder to work with, unsafe, and in 99% of the cases really not worth the trouble. Therefore:

- Avoid structs like they're the plague (they are!). Get in the habit of creating Objective-C classes instead, purely with properties and maybe an initializer. 
  Make ivars public if you confirmed through profiling that it does make a noticeable difference (in 99% of cases it won't).
- Avoid CCArray and C arrays like they're skorbut (they are!). Use NSMutableArray and other Objective-C collection classes instead. 
  For storing basic types (float, int) and to avoid NSNumber see above, create an Objective-C property-only class. A mutable Number class is included.

Performance Optimization Guideline
==================================
Your primary goal is to write code that works, is elegant and readable. Ignore performance until the end, or when it becomes a problem.

Concerning yourself with performance (premature optimization is ... you know) is just a waste of time unless the project is showing serious performance issues (in release builds).
Optimizing near the end of a project makes the most sense. You know have a fairly complete project and through profiling you can determine the one or two areas that
really need optimization. 99% of your code won't be contributing to bad performance, it almost always is just a few methods, perhaps just one. In games most often it's a
simple matter of drawing too much - you usually can't optimize this by optimizing code anyway, unless you're an OpenGL crack.

In other words: the most performance gains in iOS apps is optimizing the usage of resources. Draw less, convert images to lower color depth or PVR compression, 
reduce particle count, reuse objects instead of repeated alloc/init/dealloc cycles - that's where you'll gain most performance. Code optimizations typically have 
far less impact on overall performance.


Working With Controller & Models
================================

For Controllers and Models:
- avoid writing code in initWith*** methods -> use load, loadView, etc. methods for init code as well as loadViewBlock and createModelBlock
- design controllers and models for lazy initialization
	- controllers & models shouldn't load resources until scene is presented
	- initialize resources in load method
	- cleanup resources in unload method

For models:
- implement NSCoding methods in all model and related objects if you want to use archiving controller

For views:
- use cocos2d verbatim (ie no subclassing unless necessary)
	- subclass CCNode, CCSprite, etc *only* if you must change how the node is drawn, and that change is not possible through the class' public interface or an ObjC category
	- write the code you'd normally written in a CCNode subclass in the controller or model subclasses
- don't run CCAction and perform model updates of the same properties
	- ie don't change position or rotation in model and then also use CCMove* or CCRotate* (conflict!)
- Use CCAction mainly for stateless animations that don't interfere with gameplay (background animation, "wow" effects) or are indicated by the model
 (character spriteframe animation, change of texture, color or opacity).
	- An "action" system for Models is planned. Use it over CCAction when available.

In general:
- Physics: avoid casting to concrete implementations like KTBox2DController
	- Problem: Box2D classes will 'pollute' your project's source files with C++ code, forcing you to use .mm file extension. This typically disables Refactoring in Xcode.
	- Solution: extend the KTBox2DController and related classes with the necessary wrapper code. Interface only with KTPhysicsController.

*/